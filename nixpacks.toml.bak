# nixpacks.toml - Configuration for Railway deployment
# This file defines how to build and run both the backend and frontend services

###################
# BACKEND SERVICE #
###################

# Setup phase for backend - install Python dependencies
[phases.backend_setup]
dependsOn = []
nixPkgs = ["python3", "gcc", "python3.10-pip"]
cmds = ["cd backend && pip install -r requirements.txt"]

# Build phase for backend (minimal as FastAPI doesn't require a build step)
[phases.backend_build]
dependsOn = ["backend_setup"]
cmds = []

# Run command for backend
[start.backend]
cmd = "cd backend && uvicorn app.main:app --host 0.0.0.0 --port $PORT"
# Note: Using $PORT environment variable that Railway automatically provides

####################
# FRONTEND SERVICE #
####################

# Setup phase for frontend - install Node.js dependencies using pnpm
[phases.frontend_setup]
dependsOn = []
nixPkgs = ["nodejs-18_x", "nodePackages.pnpm"]
cmds = ["cd frontend && pnpm install"]

# Build phase for frontend - create production-ready static files
[phases.frontend_build]
dependsOn = ["frontend_setup"]
cmds = ["cd frontend && pnpm build"]

# Run command for frontend - serve the built static files
[start.frontend]
cmd = "cd frontend && npx serve -s dist -l $PORT"
# Note: Using $PORT environment variable that Railway automatically provides

######################
# VARIABLES & CACHES #
######################

# Environment variables for both services
[variables]
NIXPACKS_NODE_VERSION = "18"
NIXPACKS_PYTHON_VERSION = "3.10"

# Cache directories to speed up builds
[phases.setup.cache]
directories = [
  "backend/.venv",
  "frontend/node_modules"
]

####################
# RAILWAY SPECIFIC #
####################

# Configure how Railway should handle this project
[phases.railway]
cmds = [
  "echo 'This project contains two services: backend (FastAPI) and frontend (Vue.js)'",
  "echo 'To deploy both, create two services in your Railway project pointing to this repository'"
]
